Programa-><secuencia-sent>
secuencia-sent-><secuencia-sent>;<sentencia>
secuencia-sent-><sentencia>|<def-funcion>
sentencia-><sent-if>
sentencia-><sent-repeat>
sentencia-><sent-assign>
sentencia-><sent-declara>
sentencia-><sent-switch>
sentencia-><sent-window>
sentencia-><sent-for>
sentencia-><sent-while>
sent-if->if(<exp>){<secuencia-sent>}endif
sent-if->if(<exp>){<secuencia-sent>}else{<secuencia-sent>}endif
sent-repeat->repeat{<secuencia-sent>}until(<exp>)
sent-assign->id:=<exp>|id=<opconcat>
opconcat-><opconcat>+<cadena>|<cadena>
sent-declara->Var{<Tipo><identificadores>}
identificadores-><identificadores>,id|id
Tipo->int|float|string|char
exp-><exp-simple><op-comparacion><exp-simple>
exp-><exp-simple>
op-comparacion->==
op-comparacion->\>
op-comparacion->\<
exp-simple-><exp-simple><opsuma><term>
exp-simple-><term>
opsuma->+
opsuma->-
term-><term><opmult><potencia>
term-><potencia>
potencia-><potencia>^<factor>
potencia-><factor>
opmult->*
opmult->/
factor->(<exp>)
factor->num
factor->id
cadena->id|"id"
sent-switch->switch(id){<sent-case>}endswitch
sent-case-><cases>break;<sent-case>
sent-case-><cases>break;
cases->casenum:<secuencia-sent>|caseid:<secuencia-sent>
cases->default:<secuencia-sent>
sent-for->for(id;<exp>;stepnum){<secuencia-sent>}endfor
sent-while->while(<exp>){<secuencia-sent>}endwhile
def-parametros->id|<def-parametros>,id
def-funcion->(<def-parametros>)|()
sent-window->initWindow(<cadena>,<tam-w>,<tam-w>)
tam-w->num
sent-window->closeWindow()