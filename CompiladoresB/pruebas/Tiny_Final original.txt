Programa-><secuencia-sent>
secuencia-sent-><secuencia-sent>;<sentencia>
secuencia-sent-><sentencia>
sentencia-><sent-if>
sentencia-><sent-repeat>
sentencia-><sent-assign>
sentencia-><sent-read>
sentencia-><sent-write>
sentencia-><sent-declara>
sent-if->if(<exp>){<secuencia-sent>}endif
sent-if->if(<exp>){<secuencia-sent>}else{<secuencia-sent>}endif
sent-repeat->repeat{<secuencia-sent>}until(<exp>)
sent-assign-><id>:=<exp>
sent-read->read(<id>)
sent-write->write(<print>)
print->"<cadena>",<identificadores>|"<cadena>"|<identificadores>
cadena-><letra><cadena>|<otro><cadena>|<letra>|<otro>
otro->:|;|,|.|[|]|*|+|?|¿|¡|!|#|%|&|/
otro->\e
sent-declara->Var{<Tipo><identificadores>}
identificadores-><identificadores>,<id>|<id>
Tipo->int|float
exp-><exp-simple><op-comparacion><exp-simple>
exp-><exp-simple>
op-comparacion->==
op-comparacion->\>
op-comparacion->\<
exp-simple-><exp-simple><opsuma><term>
exp-simple-><term>
opsuma->+
opsuma->-
term-><term><opmult><potencia>
term-><potencia>
potencia-><potencia>^<factor>
potencia-><factor>
opmult->*
opmult->/
factor->(<exp>)
factor-><num>
factor-><id>
id->_<id1>
id1-><id1><letra>|<id1><digito>|<letra>
letra->a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|_
num-><num><digito>|<digito>
digito->0|1|2|3|4|5|6|7|8|9