Programa-><secuencia-sent>
secuencia-sent-><secuencia-sent>;<sentencia>
secuencia-sent-><sentencia>|<def-funcion>
sentencia-><sent-if>
sentencia-><sent-repeat>
sentencia-><sent-assign>
sentencia-><sent-declara>
sentencia-><sent-switch>
sentencia-><sent-window>
sentencia-><sent-for>
sentencia-><sent-while>
sentencia-><sent-concat>
sent-concat->concatenar(id,<opconcat>)
sent-if->if(<exp>){<secuencia-sent>}endif*
sent-if->if(<exp>){<secuencia-sent>}else{<secuencia-sent>}endif*
sent-repeat->repeat{<secuencia-sent>}until(<exp>)*
sent-assign->id:=<exp>*
opconcat-><opconcat>+<variable>|<variable>
sent-declara->Var{<Tipo><identificadores>}*
identificadores-><identificadores>,<variable>|<variable>*
Tipo->int|float|string|char*
exp-><exp-simple><op-comparacion><exp-simple>*
exp-><exp-simple>*
op-comparacion->==*
op-comparacion->\>*
op-comparacion->\<*
exp-simple-><exp-simple><opsuma><term>*
exp-simple-><term>
opsuma->+*
opsuma->-*
term-><term><opmult><potencia>*
term-><potencia>
potencia-><potencia>^<factor>*
potencia-><factor>
opmult->**
opmult->/*
factor->(<exp>)
factor-><num>
factor-><variable>
variable->id*
num->n*
sent-switch->switch(<variable>){<sent-sw>}endswitch*
sent-sw-><sent-case>|<sent-case>default:<secuencia-sent>break;*
sent-case-><cases>break;<sent-case>*
sent-case-><cases>break;*
cases->case<num>:<secuencia-sent>|case<variable>:<secuencia-sent>*
sent-for->for(<variable>;<exp>;step<num>{<secuencia-sent>}endfor
sent-while->while(<exp>){<secuencia-sent>}endwhile
def-funcion->nombre()
sent-window->initWindow(<variable>,<tam-w>,<tam-w>)
tam-w-><num>
sent-window->closeWindow()